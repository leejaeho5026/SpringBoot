--0801
JAP : Java Persistence API
	=> Java ORM API 표준
	=> Object Relational Mapping
	=> 객체와 관계형 데이터베이스 Mapping
	=> JAVA Object(class)
	=> Entity class
	
JAVA Object(Entity class) <--> ORM <--> 관계형 데이터베이스



								     Persistence Context (메모리의 한 영역)

Entity          Entity Manager   --> Entity  Entity
Manager    -->  
Factory			Entity Manager   --> Entity  Entity

Entity : database의 table에 대응하는 class
		 @Entity 어노테이션을 붙임
		 
Entity Manager Factory : Entity Manager instance를 생성, 관리함
						 Application을 실행하면 하나가 만들어짐
						 client로부터 request가 들어오면
						 Entity Manager Factory가 Entity Manager를 생성함
						 
						 
Entity Manager : Persistence Context(영속성 컨텍스트)에 접근해서
				 Entity를 대상으로 database 작업을 처리함 (CRUD)생성,읽기,갱신,삭제
				 
				 
				 
				 Persistence Context(영속성 컨텍스트)
			
				 1차 cache 	(먼저 여기서 찾는다)
item2을 얻고자함	@Id Entity  item2라는 Entity가 				(Entity가 여러개 있으닌깐 ID로 관리함)
2L로 조회함		 1L  item1	1차 cache에 저장되지 않는 경우
				 2L  item2	DataBase에서 조회함
		 
	1차 cache에서														
	item2를 반환함	 		 item2라는 Entity를 DataBase에서 조회해서 1차 cache에 저장함
	

1차 cache : item(Entity)을 영속성 컨텍스트에 Map<Key, Value>형태로 저장
		   조회시에는 find() 메소드를 호출함
	    => 동일한 transaction(트랜잭션)에서 Key 값이 같은 경우에는
	       동일한 Entity임을 보장해준다. <-- 동일성 보장	
	
	
	
database 초기화 DDL AUTO Option

spring.jpa.hibernate.ddl-auto=create	

create : 기존 Table를 삭제한 후, 새 Table 생성
none : 사용하지 않을 때 
create-drop : Create랑 똑같은데 종료할 때 Table 삭제한다.
update : 변경된 내용만 반영
validate : Entity와 Table이 정상적으로 Mapping 되었는지 확인함

주로 create,update를 많이 사용한다.


Query Method	

Query Method 이름 형식] 
=> find(EntitiClass이름)By(멤버변수이름-> (DB에서 컬럼이름) JAVA에선 멤버변수이름 사용해야된다.)
=> Class이름은 생략가능	

Query Method
JpaRepository 인터페이스를 extends 하는 인터페이스를 작성해야 함
public interface ItemRepository extends JpaRepository<T, ID>  T: 클래스

 =>public interface ItemRepository extends JpaRepository<Item, Long>
	

@Query 어노테이션
=> Query Method에 붙임
=> JPQL(Java Persistence Query Language)을 작성할 수 있음

Querydsl
=> JPQL을 java code로 작성할 수 있도록 도와주는 API
=> java code로 작성하기 때문에 compile시에 오류를 발견할 수 있음
=> 동적으로 query를 생성할 수 있음

mave repository > querydsl-jpa / querydsl-apt
	
	
--0802

Thymeleaf 타임리프

  th : 타임리프
  

boot에서는 templates 여기가 html 주소
	
xmlns:th="http://www.thymeleaf.org" 타임리프 적용 (html에서)
xmlnamespacs = xmlns	
	

Spring Security 적용하기
회원가입이나 로그인 로그아웃에 적용
회원 역할에 따라서 권한을 달리하여
접근할 수 있는 페이지를 다르게 할 수 있음	
	
	
	
	
				 
		
				 
  
  


           
   
   
                   