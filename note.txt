--0801
JAP : Java Persistence API
	=> Java ORM API 표준
	=> Object Relational Mapping
	=> 객체와 관계형 데이터베이스 Mapping
	=> JAVA Object(class)
	=> Entity class
	
JAVA Object(Entity class) <--> ORM <--> 관계형 데이터베이스



								     Persistence Context (메모리의 한 영역)

Entity          Entity Manager   --> Entity  Entity
Manager    -->  
Factory			Entity Manager   --> Entity  Entity

Entity : database의 table에 대응하는 class
		 @Entity 어노테이션을 붙임
		 
Entity Manager Factory : Entity Manager instance를 생성, 관리함
						 Application을 실행하면 하나가 만들어짐
						 client로부터 request가 들어오면
						 Entity Manager Factory가 Entity Manager를 생성함
						 
						 
Entity Manager : Persistence Context(영속성 컨텍스트)에 접근해서
				 Entity를 대상으로 database 작업을 처리함 (CRUD)생성,읽기,갱신,삭제
				 
				 
				 
				 Persistence Context(영속성 컨텍스트)
			
				 1차 cache 	(먼저 여기서 찾는다)
item2을 얻고자함	@Id Entity  item2라는 Entity가 				(Entity가 여러개 있으닌깐 ID로 관리함)
2L로 조회함		 1L  item1	1차 cache에 저장되지 않는 경우
				 2L  item2	DataBase에서 조회함
		 
	1차 cache에서														
	item2를 반환함	 		 item2라는 Entity를 DataBase에서 조회해서 1차 cache에 저장함
	

1차 cache : item(Entity)을 영속성 컨텍스트에 Map<Key, Value>형태로 저장
		   조회시에는 find() 메소드를 호출함
	    => 동일한 transaction(트랜잭션)에서 Key 값이 같은 경우에는
	       동일한 Entity임을 보장해준다. <-- 동일성 보장	
	
	
	
database 초기화 DDL AUTO Option

spring.jpa.hibernate.ddl-auto=create	

create : 기존 Table를 삭제한 후, 새 Table 생성
none : 사용하지 않을 때 
create-drop : Create랑 똑같은데 종료할 때 Table 삭제한다.
update : 변경된 내용만 반영
validate : Entity와 Table이 정상적으로 Mapping 되었는지 확인함

주로 create,update를 많이 사용한다.


Query Method	

Query Method 이름 형식] 
=> find(EntitiClass이름)By(멤버변수이름-> (DB에서 컬럼이름) JAVA에선 멤버변수이름 사용해야된다.)
=> Class이름은 생략가능	

Query Method
JpaRepository 인터페이스를 extends 하는 인터페이스를 작성해야 함
public interface ItemRepository extends JpaRepository<T, ID>  T: 클래스

 =>public interface ItemRepository extends JpaRepository<Item, Long>
	

@Query 어노테이션
=> Query Method에 붙임
=> JPQL(Java Persistence Query Language)을 작성할 수 있음

Querydsl
=> JPQL을 java code로 작성할 수 있도록 도와주는 API
=> java code로 작성하기 때문에 compile시에 오류를 발견할 수 있음
=> 동적으로 query를 생성할 수 있음

mave repository > querydsl-jpa / querydsl-apt
	
	
--0802

Thymeleaf 타임리프

  th : 타임리프
  

boot에서는 templates 여기가 html 주소
	
xmlns:th="http://www.thymeleaf.org" 타임리프 적용 (html에서)
xmlnamespacs = xmlns	
	

Spring Security 적용하기
회원가입이나 로그인 로그아웃에 적용
회원 역할에 따라서 권한을 달리하여
접근할 수 있는 페이지를 다르게 할 수 있음	
	
	
	
--0804
로그인, 로그아웃 설정, 장바구니 Cart, CartItem, Orders, OrderItem Entity만들고 설정

로그인, 로그아웃 기능 구현하기
	Spring Security에서 UserDetailsSerice인터페이스를 implements하는
	클래스를 작성해서 로그인 기능을 구현함
	
UserDetailService 인터페이스는 DataBase에서 회원정보를 가져오는 역할을 함

	loadUserByUsername() 메소드를  overriding해서
	회원정보를 조회하고 사용자의 정보와 권한을 갖는
	UserDetail 인터페이스를 반환함
	=> Spring Security에서 회원의 정보를 담는 기능을 함
		  UserDetail 인터페이스를  implements하는 클래스(User)를 작성함(클래스 User의 객체를 생성함)
		
				 
  
  
Method Area - 멤버 메소드는 여기에 저장 String ar1 = "";하면 여기에 저장 (Constant pool에 저장)
Constant pool은 Method Area안에 있는 저장공간

call Stack

heap - > 인스턴스 멤버변수 올라감  new 객체 생성해서 ("")올리면 여기에 저장
           
Optional ->OptionalTest에 있음



연관 관계 매핑
(매핑된 Entity를 조회할 때 지연로딩 방식과 즉시로딩 방식이 있음)
지연로딩 많이 사용함

즉시로딩 - @OneToOne(fetch=FetchType.EAGER)
	-> @OneToOne, @ManyToOne방식으로 매핑할 대 기본 값 -> 지연로딩으로 바꿔줘야한다.
	-> Entity를 조회할 대 해당 Entity와 Mapping된 Entity를 한꺼번에 조회함.
	-> data를 조회할 때 연관된 모든 객체의 데이터를 모두 다 한꺼번에 조회함

지연로딩 - @OneToMany(fetch=FetchType.LAZY)
	-> @OneToMany 방식으로 매핑할 때 기본 값
	-> 필요한 시점에 연관된 객체(Entity)의 data를 불러옴 

연관 관계 매핑 종류
1) 1 : 1 <-- @OneToOne
2) 1 : N <-- @OneToMany
3) N : 1 <-- @ManyToOne
4) N : N <-- @ManyToMany 중간에 테이블을 만들어서 사용한다.

연관관계 매핑방향
1) 단반향
2) 양방향 (실제로 거의 양방향이라고 생각하면 됨)

N:1 Mapping
장바구니에는 고객이 구매하고자 하는 상품들을 담음
하나의 장바구니(Cart)에는 여러 개의 상품(item)을 담을 수 있음
하나의 상품은 여러 장바구니에 담겨질 수 있음  
 	 (1   : N)         (M :   1) 
장바구니 T - 장바구니 상품 T - 상품 => 1:N N:1이런식으로 연결 N은 겹치닌깐 M으로 하나 바꾼 것,

orders 테이블과 order_item 테이블 관계 Mapping하기

				(부모 테이블)
				orders 테이블의 orders_id 컬럼(의 값)을 제공해주기 때문에 (창조키 reference key)
				 => order_item 테이블의 orders_id 컬럼에서 사용하도록 함(외부에서 가져와서 외래키 foreign key)
						(자식 테이블)

어떤 상품을 주문한지 알 수 있고, 주문한 상품이 어떤 주문에 속해 있는지 파악할 수 있음

*외래키 (foreign key)로 양방향 조회를 할 수 있음 *


	@Id // 테이블 PK역활
	@Column(name="cart_id") //DB의 테이블 컬럼 이름 바꿀 때
	@GeneratedValue(strategy = GenerationType.IDENTITY) // 기본키 생성 ID값을 따로 받지 않아도, 자동으로 AUTO_IncreMent를 하여 생성한다.
	private Long id;
	
	
	
	// Cart 테이블과 member 테이블 1:1 관계
	@OneToOne
	@JoinColumn(name = "member_id") // 조인할 테이블이름 쓰기 member테이블의 member_id 컬럼을 가져다가 쓰겠다.
	private Member member;
	

repository 패키지에 인터페이스로 생성 extends JpaRepository해줘야 함
																				  //Cart 클래스의 ID 타입 (Long)
public interface CartRepository  extends JpaRepository<Cart, Long>{










   
   
                   